
#+DATE: <2013-07-18 木>
#+OPTIONS: tex:t latex:t
#+LATEX_CLASS: jsarticle
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:


* SASTRIPS

完全ドメイン依存の研究は少しあるが
PDDLの構造から特殊クラスに移そうという試みはそんなにない。

必要なのは

+ 理論はできてる
+ あとは実証すればいい

特殊ソルバを用意する

その効果はあるか?

比較対象: FD
サブクラスに対して自動特殊化と比べる。

ランダムなPDDLの生成

シュタイナーはできてる

*自分の仕事:検出、変換、PDDL作成*

** テスト問題の作り方

実用性のある問題の作り方にもコツがある

*論文読む*

* ループ化

IHIの話

** 前提

+ 場所を埋める数は決め打ち(5個)
+ 並列ラインは今は考えないことにする。直線的
+ 作業の順番もわかっている
+ 作業する場所の数も決定済み
+ 何が動くのかも決定済み(base)
+ 複数baseの場合は考えない
+ 切削・分割は考えない。組立だけ。

** 練り上げ

+ 何が動くものなのかわからないとき検知できるか?
+ 一番移動量が大きいのがベース?
  + 必要ない。別に、PDDLの中にかいてもらえばいい。
  + ただ、かいてもらったものを検知する必要はある

実際こういうシステムを作る場合何が自然なのか?

+ プランナの結果無駄に待ってることがあることは許す
+ 製品の製造上で適切でない行いをすることは許さない。
  + そういうことはないものとして考える。
+ 初期状態の作り方 --- プランナにまかせる
+ 定常状態でbaseが何個あるかを決める

(デザイン時点でこれぐらいは考えておく。)

名前をつける

+ 少数ベースプラン
  + --- 一つまたは2つのベースの製作のため作ったプラン プ
    ランナの解ける範囲のプラン
  + これのプランの途中が定常状態の一部になっている(かもしれない)
  + 最適な定常状態ではないかもしれない
+ 多数ベースプラン
  + --- 100以上のベースの製作のため作ったプラン
  + FDで直接には解けない

** 最適なループ点を探すにはどうすればいいか?

+ 直接ループ店を探す方法
+ 少数ベースプランを最適化してそこから候補を選ぶ方法
  + 効率の良い/悪い少数ベースプランからつくるループプランは効率が良さそ
    う/悪そう(ヒューリスティクス)

場所が空いているのは効率が悪そう。

+ 順番がひとつに決定されている、とは?
  + 一台の塗装機で青も赤も塗れる。
  + 一台のネジ閉め機でどの箇所でも閉められる。
  + この場合、同じネジしめきを複数回訪れることになる。

締めてー塗ってー締めてのときに一旦戻る必要がある?

+ 場所が後戻りを必要なとき、場所に空きが必要?
+ 必要でないときには空きが必要ない??
+ 理論的な検証が必要かも

** 制作コスト見積もり

流れ

1. [X] オブジェクトからPDDLへの出力関数 -- 3
   + generic-function (UNPARSE-PDDL obj) $\rightarrow$ cons
2. テストに使うPDDLの作成 [2/4]
   1. [X] とりあえず手作業で作成 --- 3
   2. [X] タイプチェッカ (必要か?) --- 2
   3. [ ] ランダムな(難しい/現実的な)PDDLファイルの作成 --- 5
   4. [ ] 問題の難易度を推計する関数 --- 3
      + 今井さん問題にも関わってくる
3. [X] PDDLファイル読み込み --- 3
   1. [X] action-cost 対応 --- 3
4. [X] 場所とベースの検知 -- 1
   + typingすればいい
5. [ ] テンプレートの書き方
6. [X] 少数ベースプランをFDで作成  -- 1
   + シェル経由でFDに投げる
7. [ ] スケジューラに投げる -- 5
   1. [ ] 並列最適化ライブラリの作成 --- 3
   2. [ ] スケジューラ作成 --- 2
8. [ ] 生成されたプランを実行して状態遷移を得る。 -- 1
   + base数 $n=1$ は少なくとも必要
   + $n=(\mbox{少数})$ は必要か?
   + 1ベースの動き方のことを _工程_
   + n=1で得られた工程のことを _基本工程_
   + 1ベースあたりの _基本工程長_ l_1
9. [ ] 4,6 をもとに、ベースがどう動くかをチェックする -- 2
   + 場所の列を得る 工程 -- 1
   + 後戻りが必要かのチェック。 -- 1
     + 流れの中に同じ場所が複数現れるかどうか見るだけ
10. [ ] steady-state PDDLの作成。 -- 13
    + [ ] 同じ場所を二度以上経由する必要がない時 -- 2
      + 全ての場所をbaseで埋めたsteady-state PDDLを作成
    + [ ] 必要である時 -- 8
      + 問題がいろいろあるかもしれない。次のsectionで

--- 並列化 ｽｹｼﾞｭｰﾗ SATPLAN

+ SATPLANは並列化したプランを生成してくれる
  + ただし純粋なプランニング能力ではFDのほうが早い
  + SATPLNではコスト(所要時間)がすべて1じゃないといけないので、これにも
    後処理は必要
    + delayを挿入

*** 後戻りが必要なときについての考え

+ 少数ベースプランの状態遷移の中からループの候補を選ぶ。
  + $n=1$ ならループ長は $l_1$
  + $n=2$ で $l_2 \geq \frac{l_1}{2}$
    + 短調増加のはず
+ *並列性・スケジューラのことは考えなくていい* はず(なんだけど・・・)
+ インデックスがひとつ増えているようなものがあればループの候補
+ n=1でどうやってループ検出するのか？
  + 基本工程をいくつかに分割していく
    + 例えば、 $l_1 = ij$ のとき $n=i,l_i=j$ に分けてみる
    + _部分工程_
    + ただし、 $n$ が増えると困る
  + 割り算にかんけいなく分割もできる
    + 短くなった部分工程では、他の工程が終わるのを待って過ごす
    + 部分工程長に制限がない
+ n=2とかでループは出来るのか?
  + #をカラのテーブルとする
  + ２つともスタート地点にある状態で実行する方法
    + 局所的なループは生成できる
      + 10##### $\rightarrow$ #10#### 
      + #10#### $\rightarrow$ ##10###
      + インデックスがひとつずれる
  + 一つをスタート地点、一つを基本工程の真ん中辺りのところにお
    いてみる方法
    + 1##0### $\rightarrow$ ###1##0
+ ループの中では少数ベースのベースの数nしかテーブルが埋まらない




